import io
import json
import logging
from pathlib import Path
from capa.main import main
from contextlib import redirect_stdout
log = logging.getLogger(__name__)


class CapabilityExtractor(object):
    """
    Extract capabilities from binary (based on capa)
    """

    def __init__(self, rulesPath=None, *args, **kwargs):
        super(CapabilityExtractor, self).__init__()
        if rulesPath:
            self.rulesPath = Path(rulesPath).resolve(strict=True)
        else:
            self.rulesPath = None

    def getMBCMatchAddrs(self, resultsJson):
        # binMeta = resultsJson['meta']
        matchedRules = resultsJson['rules']
        behaviorMatches = {}
        nonMatches = {}
        for rule, data in matchedRules.items():
            behaviorMBC = None
            if 'mbc' in data['meta']:
                behaviorMBC = data['meta']['mbc']
            matchedAddrs = []
            for match in data['matches']:
                if len(match) == 2:
                    # print(match[0]['type'])
                    if 'value' in match[0]:
                        matchedAddrs.append(match[0]['value'])
            if matchedAddrs and behaviorMBC:
                behaviorMatches[rule] = {'mbc': behaviorMBC, 'locations': matchedAddrs}
            else:
                nonMatches[rule] = {'mbc': behaviorMBC, 'locations': matchedAddrs}
        return behaviorMatches, nonMatches

    def getCapJson(self, binPath):
        output = io.StringIO()
        with redirect_stdout(output):
            if self.rulesPath:
                main(['--json', '-r {}'.format(self.rulesPath),
                      '{}'.format(binPath.resolve(strict=True))])
            else:
                main(['--json', '{}'.format(binPath.resolve(strict=True))])
        results = output.getvalue()
        resObj = json.loads(results)
        return resObj
