#!/usr/bin/env python3

import logging
import argparse as ap
from pathlib import Path
from cfg_generator import RemoteIDA, CFGExtractor
from behavior_graph_gen import gen_behavior_graph

log = logging.getLogger(__name__)


def main():
    log_levels = {
      'critical': logging.CRITICAL,
      'error': logging.ERROR,
      'warn': logging.WARNING,
      'warning': logging.WARNING,
      'info': logging.INFO,
      'debug': logging.DEBUG
    }

    argparser = ap.ArgumentParser(description='''Extracts BFG given binary''')
    argparser.add_argument('-l', '--log', help='Indicate log level',
                           choices=log_levels.keys(), default='info')
    # required
    argparser.add_argument('-u', '--username', required=True,
                           help='username on the remote IDApro host')
    argparser.add_argument('-i', '--ida-server', required=True,
                           help='remote host to connect')
    argparser.add_argument('-b', '--binary', required=True,
                           help='malware/binary to be analyzed')
    argparser.add_argument('-s', '--ida-script', required=True,
                           help='path of IDA script to run on remote server')
    # optional
    argparser.add_argument('-p', '--ida-path', default='/opt/idapro/ida64',
                           help='path of the IDA binary on remote machine')
    argparser.add_argument('-d', '--rem-dir', default='/tmp/cfg_generator',
                           help='temporary directory on the remote host')
    argparser.add_argument('-o', '--out-dir', default='./output',
                           help='output directory to store generated files')

    args = argparser.parse_args()
    log_level = log_levels.get(args.log.lower())
    logging.basicConfig(level=log_level, format='%(levelname)s: %(message)s')
    log.debug('Log level: {}'.format(log_level))
    username = args.username
    host = args.ida_server
    ida_script_path = Path(args.ida_script).resolve(strict=True)
    malware_path = Path(args.binary).resolve(strict=True)
    ida_path = Path(args.ida_path)
    remote_dir = Path(args.rem_dir)
    output_dir = Path(args.out_dir)
    rem_ida = RemoteIDA(username, host, remote_dir=remote_dir,
                        ida_path=ida_path)
    # extract cfg for a binary
    cfg_ext = CFGExtractor(rem_ida, output_dir=output_dir)
    cfg_results_dir = cfg_ext.extract(malware_path, ida_script_path)
    cfg_path = Path(cfg_results_dir, 'cfg.dot')
    mdata_path = Path(cfg_results_dir, 'metadata.json')
    behavior_graph = gen_behavior_graph(malware_path, cfg_path, mdata_path)
    # print(behavior_graph.nodes)
    # print(behavior_graph.edges)
    # breakpoint()


if __name__ == '__main__':
  main()
