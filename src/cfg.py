import ida_gdl
import ida_funcs
import ida_auto
import ida_pro
import idautils
import idc
import json

#MALWARE_DIR = "/home/adhy/malware_samples/apt-samples/APT\ 1/"
MALWARE_SAMPLE = "00be6858156b0be404b4fa4852ffc550c25565236beaa4cb13ffe288bcb48d8e"
OUTPUT_DIR = "/home/adhy/generated_files/"

# generate cfg (.dot) for each function
def generate_cfg():
    # https://reverseengineering.stackexchange.com/questions/12742/compare-call-graphs-of-two-dlls-using-idapython-comand-line
    for ea in idautils.Functions():
        idc.gen_flow_graph(OUTPUT_DIR + "%s.dot" % ida_funcs.get_func_name(ea), ida_funcs.get_func_name(ea), ea , idc.BADADDR, idaapi.CHART_GEN_DOT)

def generate_global_cfg():
    # ida_gdl.gen_flow_graph is called in the background
    idc.gen_flow_graph(OUTPUT_DIR + MALWARE_SAMPLE + ".dot", "cfg", 0, idc.BADADDR, ida_gdl.CHART_GEN_DOT)

    # generate basic block metadata (start_ea, end_ea) which is lost during creation of flow graph
    flow_c = ida_gdl.FlowChart(None, (0, idc.BADADDR))
    metadata = dict() # {id : {start_ea: xxx, end_ea: xxx}}
    for block in flow_c:
        metadata[block.id] = {"start_ea": block.start_ea, "end_ea": block.end_ea}
    with open(OUTPUT_DIR + MALWARE_SAMPLE + "-meta.json", "w") as f:
        json.dump(metadata, f)

# dump the assembly of the binary
def generate_asm():
    # idc.gen_file(idc.OFILE_ASM, OUTPUT_DIR + MALWARE_SAMPLE + ".asm", 0, idc.BADADDR, 0)
    # idc.gen_file(idc.OFILE_DIF, OUTPUT_DIR + MALWARE_SAMPLE + ".dif", 0, idc.BADADDR, 0)
    # idc.gen_file(idc.OFILE_EXE, OUTPUT_DIR + MALWARE_SAMPLE + ".exe", 0, idc.BADADDR, 0)
    # idc.gen_file(idc.OFILE_IDC, OUTPUT_DIR + MALWARE_SAMPLE + ".idc", 0, idc.BADADDR, 0)
    # idc.gen_file(idc.OFILE_LST, OUTPUT_DIR + MALWARE_SAMPLE + ".lst", 0, idc.BADADDR, 0)
    idc.gen_file(idc.OFILE_LST, OUTPUT_DIR + MALWARE_SAMPLE + ".asm", 0, idc.BADADDR, 0)
    # idc.gen_file(idc.OFILE_MAP, OUTPUT_DIR + MALWARE_SAMPLE + ".map", 0, idc.BADADDR, 0)

def main():
    ida_auto.auto_wait()
    #generate_cfg()
    generate_global_cfg()
    #generate_asm()
    ida_pro.qexit(0)
    
if __name__ == "__main__":
    main()
