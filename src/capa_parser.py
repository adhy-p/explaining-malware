#!/usr/bin/python3

import json
import pydantic
import sys
from typing import Dict, Tuple, List, Set

def get_capability_locations(data: dict) -> Set[str]: 
    locations = set()
    if data['locations']:
        #print(type(data['locations']))
        #print(type(data['locations'][0]))
        entry = data['locations'][0].get('value')
        if entry:
            locations.add(hex(int(entry)))

    if data['children']:
        for i in data['children']:
            locations.update(get_capability_locations(i))
    return locations

def get_function_capabilities(capa_json_file: str) -> Dict[str, Tuple[List[Dict[str,str]], Set[str]]]:
    with open(capa_json_file, "rb") as f:
        doc = json.loads(f.read().decode("utf-8"))
        '''
        doc is a nested dictionary
        unpacking doc layer by layer until we get our desired data:
        doc = {'meta': ..., 'rules': ...}
        doc['rules'] = {'capability': ...}
        doc['rules']['CAPABILITY'] = {'meta': ..., 'source': ..., 'matches': ...}
        doc['rules']['CAPABILITY']['matches'] = [[ {'type': ...}, {'success': ..., 'node': ..., ...}]]
        doc['rules']['CAPABILITY']['matches'][0] = [ {'type': ...}, {'success': ..., 'node': ..., ...}]
        doc['rules']['CAPABILITY']['matches'][0][-1] = {'success': ..., 'node': ..., ....}
        doc['rules']['CAPABILITY']['matches'][0][-1]['locations'] = [ {'locations': ..., 'children': ..., ...} ]
        '''
        func_capabilities = dict()
        for key, capability_data in doc['rules'].items():
            # print("capabilities: ", key)
            mbc = capability_data["meta"]["mbc"] if capability_data["meta"]["mbc"] else capability_data["meta"]["attack"]
            func_capabilities[key] = (mbc, get_capability_locations(capability_data['matches'][0][-1]))
        return func_capabilities

def reverse_map(m: dict) -> dict:
    rev_m = dict()
    for k,v in m.items():
        for fn in v[1]:
            if fn in rev_m:
                rev_m[fn].append({k: v[0][0] if v[0] else ""}) # the mbc might be empty
            else:
                rev_m[fn] = [ {k: v[0][0] if v[0] else ""} ]
    return rev_m

def get_fn2capa(capa_json_file: str):
    return reverse_map(get_function_capabilities(capa_json_file))

def main():
    capa2fn = get_function_capabilities(sys.argv[1])
    fn2capa = reverse_map(capa2fn)
    # for k,v in capa2fn.items():
    #     print(k, v)
    for k,v in fn2capa.items():
        print(k, v)

if __name__ == '__main__':
    main()
